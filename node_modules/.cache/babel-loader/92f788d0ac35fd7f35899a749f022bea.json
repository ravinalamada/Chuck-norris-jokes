{"ast":null,"code":"var _jsxFileName = \"/home/student/Coding/projects/Chuck-norris-jokes/jokes-app/src/context/GlobalContextProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect, createContext, useState } from 'react';\nimport reducer from './Reducer';\nimport { RANDOM_API } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst endpointR = 'http://api.icndb.com/jokes';\nconst initialValue = {\n  loading: true,\n  jokes: [],\n  nameToReplace: '',\n  category: '',\n  jokesData: {},\n  selectCountryByRegion: () => {},\n  searchCountryByName: () => {},\n  handleSubmit: () => {}\n};\nexport const Context = /*#__PURE__*/createContext(initialValue);\nexport const GlobalContext = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialValue);\n  const [data, setData] = useState({\n    name: '',\n    category: ''\n  });\n\n  const fetchRandomJokes = async () => {\n    const countryData = await fetch(RANDOM_API);\n    const countryRes = await countryData.json();\n    dispatch({\n      type: 'FETCH_RANDOM_JOKES',\n      payload: countryRes.value\n    });\n  };\n\n  const fetchJokesWithCategory = async () => {\n    const countryData = await fetch(endpointR);\n    const countryRes = await countryData.json();\n    const filteredJokeWithCat = countryRes === null || countryRes === void 0 ? void 0 : countryRes.value.filter(j => j.categories[0] === state.category);\n    const randomiseFilteredJoke = filteredJokeWithCat[Math.floor(Math.random() * filteredJokeWithCat.length)];\n    dispatch({\n      type: 'FETCH_JOKES_WITH_CATEGORY',\n      payload: randomiseFilteredJoke\n    });\n  };\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const nameObj = {\n      name: state.nameToReplace,\n      category: state.category\n    };\n    setData(nameObj);\n  }\n\n  useEffect(() => {\n    if (data.category !== '') {\n      fetchJokesWithCategory();\n    } else {\n      fetchRandomJokes();\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      jokes: state.jokes,\n      loading: state.loading,\n      nameToReplace: state.nameToReplace,\n      category: state.category,\n      searchCountryByName: e => dispatch({\n        type: 'SEARCH_COUNTRY_BY_NAME',\n        payload: e.target.value\n      }),\n      selectCountryByRegion: e => dispatch({\n        type: 'SELECT_COUNTRY_BY_REGION',\n        payload: e.target.value\n      }),\n      handleSubmit\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalContext, \"73zv+1XmvbEXHV8mWbWWB37zke4=\");\n\n_c = GlobalContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalContext\");","map":{"version":3,"sources":["/home/student/Coding/projects/Chuck-norris-jokes/jokes-app/src/context/GlobalContextProvider.tsx"],"names":["React","useReducer","useEffect","createContext","useState","reducer","RANDOM_API","endpointR","initialValue","loading","jokes","nameToReplace","category","jokesData","selectCountryByRegion","searchCountryByName","handleSubmit","Context","GlobalContext","children","state","dispatch","data","setData","name","fetchRandomJokes","countryData","fetch","countryRes","json","type","payload","value","fetchJokesWithCategory","filteredJokeWithCat","filter","j","categories","randomiseFilteredJoke","Math","floor","random","length","e","preventDefault","nameObj","target"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect, createContext, useState } from 'react'\nimport { State } from '../utils/Types'\nimport reducer from './Reducer'\nimport { RANDOM_API, LIMIT_TO } from '../constants'\n\nconst endpointR = 'http://api.icndb.com/jokes'\n\nconst initialValue: State = {\n  loading: true,\n  jokes: [],\n  nameToReplace: '',\n  category: '',\n  jokesData: {},\n  selectCountryByRegion: () => {},\n  searchCountryByName: () => {},\n  handleSubmit: () => {},\n}\n\nexport const Context = createContext(initialValue)\n\nexport const GlobalContext: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialValue)\n  const [data, setData] = useState({\n    name: '',\n    category: '',\n  })\n\n  const fetchRandomJokes = async () => {\n    const countryData = await fetch(RANDOM_API)\n    const countryRes = await countryData.json()\n    dispatch({ type: 'FETCH_RANDOM_JOKES', payload: countryRes.value })\n  }\n\n  const fetchJokesWithCategory = async () => {\n    const countryData = await fetch(endpointR)\n    const countryRes = await countryData.json()\n    const filteredJokeWithCat = countryRes?.value.filter(\n      (j: any) => j.categories[0] === state.category\n    )\n    const randomiseFilteredJoke =\n      filteredJokeWithCat[\n        Math.floor(Math.random() * filteredJokeWithCat.length)\n      ]\n    dispatch({\n      type: 'FETCH_JOKES_WITH_CATEGORY',\n      payload: randomiseFilteredJoke,\n    })\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const nameObj = {\n      name: state.nameToReplace,\n      category: state.category,\n    }\n    setData(nameObj)\n  }\n\n  useEffect(() => {\n    if (data.category !== '') {\n      fetchJokesWithCategory()\n    } else {\n      fetchRandomJokes()\n    }\n  }, [data])\n\n  return (\n    <Context.Provider\n      value={{\n        jokes: state.jokes,\n        loading: state.loading,\n        nameToReplace: state.nameToReplace,\n        category: state.category,\n        searchCountryByName: (e) =>\n          dispatch({ type: 'SEARCH_COUNTRY_BY_NAME', payload: e.target.value }),\n        selectCountryByRegion: (e) =>\n          dispatch({\n            type: 'SELECT_COUNTRY_BY_REGION',\n            payload: e.target.value,\n          }),\n        handleSubmit,\n      }}>\n      {children}\n    </Context.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}