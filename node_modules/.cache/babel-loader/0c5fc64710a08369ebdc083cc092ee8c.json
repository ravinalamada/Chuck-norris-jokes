{"ast":null,"code":"var _jsxFileName = \"/home/student/Coding/projects/Chuck-norris-jokes/jokes-app/src/context/GlobalContextProvider.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect, createContext, useState } from 'react';\nimport axios from 'axios';\nimport reducer from './Reducer';\nimport { RANDOM_API } from '../constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst endpointR = 'http://api.icndb.com/jokes';\nconst initialValue = {\n  loading: true,\n  jokes: [],\n  nameToReplace: '',\n  category: '',\n  selectCountryByRegion: () => {},\n  searchCountryByName: () => {},\n  handleSubmit: () => {}\n};\nexport const Context = /*#__PURE__*/createContext(initialValue);\nexport const GlobalContext = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, initialValue);\n  const [jokesData, setJokesData] = useState({\n    name: '',\n    category: ''\n  });\n\n  const fetchRandomJokes = async () => {\n    const getJokesData = await axios(RANDOM_API);\n    console.log(getJokesData);\n    dispatch({\n      type: 'FETCH_RANDOM_JOKES',\n      payload: getJokesData\n    });\n  };\n\n  const fetchJokesWithCategory = async () => {\n    const countryData = await fetch(endpointR);\n    const countryRes = await countryData.json();\n    const filteredJokeWithCat = countryRes === null || countryRes === void 0 ? void 0 : countryRes.value.filter(j => j.categories[0] === state.category);\n    const randomiseFilteredJoke = filteredJokeWithCat[Math.floor(Math.random() * filteredJokeWithCat.length)];\n    dispatch({\n      type: 'FETCH_JOKES_WITH_CATEGORY',\n      payload: randomiseFilteredJoke\n    });\n  };\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    const nameObj = {\n      name: state.nameToReplace,\n      category: state.category\n    };\n    setJokesData(nameObj);\n  }\n\n  useEffect(() => {\n    if (jokesData.category !== '') {\n      fetchJokesWithCategory();\n    } else {\n      fetchRandomJokes();\n    }\n  }, [jokesData]);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      jokes: state.jokes,\n      loading: state.loading,\n      nameToReplace: state.nameToReplace,\n      category: state.category,\n      searchCountryByName: e => dispatch({\n        type: 'SEARCH_COUNTRY_BY_NAME',\n        payload: e.target.value\n      }),\n      selectCountryByRegion: e => dispatch({\n        type: 'SELECT_COUNTRY_BY_REGION',\n        payload: e.target.value\n      }),\n      handleSubmit,\n      jokesData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalContext, \"ACJAMeJGzX9xZrtAo/x6DxtJW1o=\");\n\n_c = GlobalContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalContext\");","map":{"version":3,"sources":["/home/student/Coding/projects/Chuck-norris-jokes/jokes-app/src/context/GlobalContextProvider.tsx"],"names":["React","useReducer","useEffect","createContext","useState","axios","reducer","RANDOM_API","endpointR","initialValue","loading","jokes","nameToReplace","category","selectCountryByRegion","searchCountryByName","handleSubmit","Context","GlobalContext","children","state","dispatch","jokesData","setJokesData","name","fetchRandomJokes","getJokesData","console","log","type","payload","fetchJokesWithCategory","countryData","fetch","countryRes","json","filteredJokeWithCat","value","filter","j","categories","randomiseFilteredJoke","Math","floor","random","length","e","preventDefault","nameObj","target"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect, createContext, useState } from 'react'\nimport axios from 'axios'\nimport { State } from '../utils/Types'\nimport reducer from './Reducer'\nimport { RANDOM_API, LIMIT_TO } from '../constants'\n\nconst endpointR = 'http://api.icndb.com/jokes'\n\nconst initialValue: State = {\n  loading: true,\n  jokes: [],\n  nameToReplace: '',\n  category: '',\n  selectCountryByRegion: () => {},\n  searchCountryByName: () => {},\n  handleSubmit: () => {},\n}\n\nexport const Context = createContext(initialValue)\n\nexport const GlobalContext: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialValue)\n  const [jokesData, setJokesData] = useState({\n    name: '',\n    category: '',\n  })\n\n  const fetchRandomJokes = async () => {\n    const getJokesData = await axios(RANDOM_API)\n    console.log(getJokesData)\n\n    dispatch({ type: 'FETCH_RANDOM_JOKES', payload: getJokesData })\n  }\n\n  const fetchJokesWithCategory = async () => {\n    const countryData = await fetch(endpointR)\n    const countryRes = await countryData.json()\n    const filteredJokeWithCat = countryRes?.value.filter(\n      (j: any) => j.categories[0] === state.category\n    )\n    const randomiseFilteredJoke =\n      filteredJokeWithCat[\n        Math.floor(Math.random() * filteredJokeWithCat.length)\n      ]\n    dispatch({\n      type: 'FETCH_JOKES_WITH_CATEGORY',\n      payload: randomiseFilteredJoke,\n    })\n  }\n\n  function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n    e.preventDefault()\n    const nameObj = {\n      name: state.nameToReplace,\n      category: state.category,\n    }\n    setJokesData(nameObj)\n  }\n\n  useEffect(() => {\n    if (jokesData.category !== '') {\n      fetchJokesWithCategory()\n    } else {\n      fetchRandomJokes()\n    }\n  }, [jokesData])\n\n  return (\n    <Context.Provider\n      value={{\n        jokes: state.jokes,\n        loading: state.loading,\n        nameToReplace: state.nameToReplace,\n        category: state.category,\n        searchCountryByName: (e) =>\n          dispatch({ type: 'SEARCH_COUNTRY_BY_NAME', payload: e.target.value }),\n        selectCountryByRegion: (e) =>\n          dispatch({\n            type: 'SELECT_COUNTRY_BY_REGION',\n            payload: e.target.value,\n          }),\n        handleSubmit,\n        jokesData,\n      }}>\n      {children}\n    </Context.Provider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}